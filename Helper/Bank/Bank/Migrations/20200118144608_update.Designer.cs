// <auto-generated />
using System;
using Bank.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bank.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200118144608_update")]
    partial class update
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bank.Models.ConvertCurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Convert")
                        .HasColumnType("real");

                    b.Property<int>("CurrencyFromId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyFromId");

                    b.HasIndex("CurrencyToId");

                    b.ToTable("ConvertCurrencies");
                });

            modelBuilder.Entity("Bank.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Bank.Models.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PrivateAccountFromId1")
                        .HasColumnType("int");

                    b.Property<int?>("PrivateAccountToId1")
                        .HasColumnType("int");

                    b.Property<float>("Sum")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PrivateAccountFromId1");

                    b.HasIndex("PrivateAccountToId1");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("Bank.Models.PrivateAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Guid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Sum")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("PrivateAccounts");
                });

            modelBuilder.Entity("Bank.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FIO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Admin",
                            DocumentCode = "Admin",
                            FIO = "Admin",
                            Login = "Admin",
                            PasswordHash = "E3AFED0047B08059D0FADA10F400C1E5",
                            Role = 0
                        },
                        new
                        {
                            Id = 2,
                            Address = "Client",
                            DocumentCode = "Client",
                            FIO = "Client",
                            Login = "Client",
                            PasswordHash = "577D7068826DE925EA2AEC01DBADF5E4",
                            Role = 1
                        },
                        new
                        {
                            Id = 3,
                            Address = "Director",
                            DocumentCode = "Director",
                            FIO = "Director",
                            Login = "Director",
                            PasswordHash = "7C5BA892645AF8D7DBA520E3978C726F",
                            Role = 2
                        },
                        new
                        {
                            Id = 4,
                            Address = "Worker",
                            DocumentCode = "Worker",
                            FIO = "Worker",
                            Login = "Worker",
                            PasswordHash = "62EFB9EC331E364B96EFE68C8B03CA20",
                            Role = 3
                        });
                });

            modelBuilder.Entity("Bank.Models.ConvertCurrency", b =>
                {
                    b.HasOne("Bank.Models.Currency", "CurrencyFrom")
                        .WithMany()
                        .HasForeignKey("CurrencyFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bank.Models.Currency", "CurrencyTo")
                        .WithMany()
                        .HasForeignKey("CurrencyToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Bank.Models.Operation", b =>
                {
                    b.HasOne("Bank.Models.PrivateAccount", "PrivateAccountFrom")
                        .WithMany()
                        .HasForeignKey("PrivateAccountFromId1");

                    b.HasOne("Bank.Models.PrivateAccount", "PrivateAccountTo")
                        .WithMany()
                        .HasForeignKey("PrivateAccountToId1");
                });

            modelBuilder.Entity("Bank.Models.PrivateAccount", b =>
                {
                    b.HasOne("Bank.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bank.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
